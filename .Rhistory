sco <- clean_data(sco_alive_text)
all_countries <- rbind(deu, cze, fra, usa, gbr, sco)
View(irl_alive_text)
irl_alive_text <- subset(irl_alive_text, select = -c(1, 2))
write.csv(irl_alive_text, "raw_data/irl_alive_text.csv", row.names = FALSE)
irl_alive_text <- read_csv("raw_data/irl_alive_text.csv")
irl <- clean_data(irl_alive_text)
all_countries <- rbind(deu, cze, fra, usa, gbr, sco, irl)
View(esp_alive_text)
esp_alive_text <- subset(esp_alive_text, select = -c(1, 2))
write.csv(esp_alive_text, "raw_data/esp_alive_text.csv", row.names = FALSE)
esp_alive_text <- read_csv("raw_data/esp_alive_text.csv")
esp <- clean_data(esp_alive_text)
all_countries <- rbind(deu, cze, fra, usa, gbr, sco, irl, esp)
View(esp_alive_text)
View(esp)
cat("Variable Names: ", names(esp), "\n")
cat("Variable Names: ", names(esp), "\n")
cat("Variable Names: ", names(deu), "\n")
esp_alive_text <- mutate(esp_alive_text$ethnicity = NA)
esp_alive_text <- mutate(esp_alive_text$ethnicity == NA)
esp_alive_text <- esp_alive_text %>%
mutate(ethnicity = NA)
View(esp_alive_text)
esp_alive_text <- subset(esp_alive_text, select = -c(13))
View(esp_alive_text)
esp_alive_text <- esp_alive_text %>%
mutate(ethnicity = NA) %>%
relocate(ethnicity, .after = 6)
View(esp_alive_text)
write.csv(esp_alive_text, "raw_data/esp_alive_text.csv", row.names = FALSE)
esp_alive_text <- read_csv("raw_data/esp_alive_text.csv")
esp <- clean_data(esp_alive_text)
all_countries <- rbind(deu, cze, fra, usa, gbr, sco, irl, esp)
View(can_alive_text)
can_alive_text <- subset(can_alive_text, select = -c(1, 2))
write.csv(can_alive_text, "raw_data/can_alive_text.csv", row.names = FALSE)
can_alive_text <- read_csv("raw_data/can_alive_text.csv")
can <- clean_data(can_alive_text)
all_countries <- rbind(deu, cze, fra, usa, gbr, sco, irl, esp, can)
View(aut_alive_text)
aut_alive_text <- subset(aut_alive_text, select = -c(1, 2))
write.csv(aut_alive_text, "raw_data/aut_alive_text.csv", row.names = FALSE)
aut_alive_text <- read_csv("raw_data/aut_alive_text.csv")
aut <- clean_data(aut_alive_text)
all_countries <- rbind(deu, cze, fra, usa, gbr, sco, irl, esp, can, aut)
View(all_countries)
ggplot(data, aes(x = sex, y = Count, fill = sex)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "female/male politicians per country") +
xlab("Sex") +
ylab("number politicians") +
scale_fill_manual(values = c("female" = "pink", "male" = "blue")) +
facet_wrap(~country) +
theme_minimal() +
theme(legend.title = element_blank())
ggplot(all_countries, aes(x = sex, y = Count, fill = sex)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "female/male politicians per country") +
xlab("Sex") +
ylab("number politicians") +
scale_fill_manual(values = c("female" = "pink", "male" = "blue")) +
facet_wrap(~country) +
theme_minimal() +
theme(legend.title = element_blank())
ggplot(all_countries, aes(x = sex, fill = sex)) +
geom_bar() +
facet_wrap(~country, scales = "free_y") +
labs(title = "Anteil männlicher und weiblicher Politikerinnen pro Land") +
xlab("Geschlecht") +
ylab("Anteil (%)") +
scale_fill_manual(values = c("male" = "blue", "female" = "pink")) +
theme_minimal() +
theme(legend.title = element_blank())
View(gbr_alive_text)
View(gbr)
clean_data <- function(df) {
initial_rows <- nrow(df)
# Remove CSS-like structures
df$plain_text <- str_remove_all(df$plain_text, "\\..*?\\{.*?\\}")
# Initialize counters for removal reasons
removal_reason_redirect <- sum(grepl("^(Redirect to:|Weiterleitung nach:|Rediriger vers:|Redirige a:|Přesměrování na:)", df$plain_text, ignore.case = TRUE))
removal_reason_refering_page <- sum(grepl("may refer to:|ist der Name folgender Personen:|Cette page d'homonymie répertorie différentes personnes|může být:", df$plain_text, ignore.case = TRUE))
removal_reason_not_found <- sum(grepl("^(Error fetching content for page:|No Wikipedia page name provided or missing|Es wurde kein Wikipedia-Seitenname angegeben)", df$plain_text, ignore.case = TRUE))
# Filter rows based on specific conditions
df <- df %>%
filter(!grepl("^(Redirect to:|Weiterleitung nach:|Rediriger vers:|Redirige a:|Přesměrování na:)", plain_text, ignore.case = TRUE) &
!grepl("may refer to:|ist der Name folgender Personen:|Cette page d'homonymie répertorie différentes personnes|může být:", plain_text, ignore.case = TRUE) &
!grepl("Error fetching content for page:|No Wikipedia page name provided or missing|Es wurde kein Wikipedia-Seitenname angegeben", plain_text, ignore.case = TRUE))
# Calculate the number of rows removed
rows_removed <- initial_rows - nrow(df)
# Print statistics about the removal reasons
cat("Removal reasons:\n")
cat("  - Redirect:", removal_reason_redirect, "\n")
cat("  - Reference Page:", removal_reason_refering_page, "\n")
cat("  - Not Found/no name_provided:", removal_reason_not_found, "\n")
# Create a message about the cleaning process
cat("Cleaned data: Removed", rows_removed, "rows.\n")
# Return the cleaned data frame
return(df)
}
gbr <- clean_data(gbr_alive_text)
ggplot(all_countries, aes(x = sex, fill = sex)) +
geom_bar() +
facet_wrap(~country, scales = "free_y") +
labs(title = "Anteil männlicher und weiblicher Politikerinnen pro Land") +
xlab("Geschlecht") +
ylab("Anteil (%)") +
scale_fill_manual(values = c("male" = "blue", "female" = "pink")) +
theme_minimal() +
theme(legend.title = element_blank())
View(gbr)
#combine all data in one df
all_countries <- rbind(deu, cze, fra, usa, gbr, sco, irl, esp, can, aut)
ggplot(all_countries, aes(x = sex, fill = sex)) +
geom_bar() +
facet_wrap(~country, scales = "free_y") +
labs(title = "Anteil männlicher und weiblicher Politikerinnen pro Land") +
xlab("Geschlecht") +
ylab("Anteil (%)") +
scale_fill_manual(values = c("male" = "blue", "female" = "pink")) +
theme_minimal() +
theme(legend.title = element_blank())
ggplot(all_countries, aes(x = sex, fill = sex)) +
geom_bar() +
facet_wrap(~country, scales = "free_y") +
labs(title = "share of male/female politicians per country") +
xlab("sex") +
ylab("number") +
scale_fill_manual(values = c("male" = "blue", "female" = "pink")) +
theme_minimal() +
theme(legend.title = element_blank())
ggplot(all_countries, aes(x = sex, fill = sex)) +
geom_bar() +
facet_wrap(~country, scales = "free_y") +
labs(title = "Number of male/female politicians per country") +
xlab("sex") +
ylab("number") +
scale_fill_manual(values = c("male" = "blue", "female" = "pink")) +
theme_minimal() +
theme(legend.title = element_blank())
?legislatoR()
sco_traffic <- get_traffic(legislature = "sco")
View(sco_traffic)
sco_traffic$date <- format(sco_traffic$date, "%Y-%m")
View(sco_traffic)
traffic_per_month_politician <- sco_traffic %>%
group_by(pageid, date) %>%
summarise(Edits_Count = n())
View(traffic_per_month_politician)
traffic_per_month_politician <- sco_traffic %>%
group_by(pageid, date) %>%
summarise(Edits_Count = n()) %>%
group_by(pageid) %>%
summarise(Average_Traffic = sum(Edits_Count) / n_distinct(date))
View(traffic_per_month_politician)
sco_traffic <- get_traffic(legislature = "sco")
sco_traffic$date <- format(sco_traffic$date, "%Y-%m")
traffic_per_month_politician <- sco_traffic %>%
group_by(pageid, date) %>%
summarise(Edits_Count = n())
View(traffic_per_month_politician)
average_traffic_per_month_politician <- sco_traffic %>%
group_by(pageid) %>%
summarise(Average_Traffic = sum(!is.na(Edits_Count)) / n_distinct(date))
average_traffic_per_month_politician <- sco_traffic %>%
group_by(pageid) %>%
summarise(Average_Traffic = sum(!is.na(traffic)) / n_distinct(date))
View(average_traffic_per_month_politician)
traffic_per_month_politician <- sco_traffic %>%
group_by(pageid, date) %>%
summarise(Edits_Count = n())
View(traffic_per_month_politician)
# Anzahl der Bearbeitungen pro Monat pro Politiker berechnen
edits_per_month_politician <- sco_traffic %>%
group_by(pageid, date) %>%
summarise(Edits_Count = n())
# Durchschnittliche Anzahl der Bearbeitungen pro Monat pro Politiker berechnen
average_traffic_per_month_politician <- edits_per_month_politician %>%
group_by(pageid) %>%
summarise(Average_Traffic = mean(Edits_Count, na.rm = TRUE))
View(average_traffic_per_month_politician)
edits_per_month_politician <- sco_traffic %>%
group_by(pageid)%>%
summarise(total_traffic = n())
traffic_per_month_politician <- sco_traffic %>%
group_by(pageid)%>%
summarise(total_traffic = n())
View(traffic_per_month_politician)
average_traffic_per_politician <- traffic_per_month_politician$Total_Edits / n_distinct(date)
average_traffic_per_politician <- traffic_per_month_politician$total_traffic / n_distinct(date)
average_traffic_per_politician <- traffic_per_month_politician$total_traffic / n_distinct(sco_traffic$date)
View(average_traffic_per_month_politician)
average_traffic_per_politician <- traffic_per_month_politician$total_traffic / n_distinct(sco_traffic$date)
average_traffic_per_politician <- traffic_per_month_politician %>%
summarise(Average_Traffic = sum(total_traffic) / n_distinct(sco_traffic$date))
View(average_traffic_per_politician)
average_traffic_per_politician <- traffic_per_month_politician %>%
group_by(pageid) %>%
summarise(Average_Traffic = sum(total_traffic) / n_distinct(sco_traffic$date))
View(average_traffic_per_politician)
View(traffic_per_month_politician)
View(sco_traffic)
total_edits_per_politician <- sco_traffic %>%
group_by(politician_id) %>%
summarise(Total_Edits = sum(anzahl_edits))
total_traffic_per_politician <- sco_traffic %>%
group_by(pageid) %>%
summarise(total_traffic = sum(traffic))
View(total_traffic_per_politician)
#sanity check
sum(total_traffic_per_politician$total_traffic)
View(sco_traffic)
sum(sco_traffic$traffic)
## averge per month per politician
average_traffic_per_politician <- total_traffic_per_politician %>%
mutate(average_traffic_per_month = total_traffic / n_distinct(sco_traffic$date))
View(average_traffic_per_politician)
View(sco)
sco <- average_traffic_per_politician %>%
left_join(select(sco, pageid, sex, wikititle, plain_text), by = "pageid")
str(sco$pageid)
str(sco_traffic$pageid)
average_traffic_per_politician <- as.numericaverage_traffic_per_politician$pageid)
average_traffic_per_politician <- as.numeric(average_traffic_per_politician$pageid)
sco <- average_traffic_per_politician %>%
left_join(select(sco, pageid, sex, wikititle, plain_text), by = "pageid")
class(average_traffic_per_politician)
otal_traffic_per_politician <- sco_traffic %>%
group_by(pageid) %>%
summarise(total_traffic = sum(traffic))
#sanity check - genauso viele views wie in sco_traffic, nur nach politician geordnet
sum(total_traffic_per_politician$total_traffic)
## averge per month per politician
average_traffic_per_politician <- total_traffic_per_politician %>%
mutate(average_traffic_per_month = total_traffic / n_distinct(sco_traffic$date))
average_traffic_per_politician <- as.data.frame(average_traffic_per_politician)
sco <- average_traffic_per_politician %>%
left_join(select(sco, pageid, sex, wikititle, plain_text), by = "pageid")
average_traffic_per_politician <- as.numeric(average_traffic_per_politician$pageid)
sco <- average_traffic_per_politician %>%
left_join(select(sco, pageid, sex, wikititle, plain_text), by = "pageid")
str(sco$pageid)
str(average_traffic_per_politician$pageid)
str(average_traffic_per_politician)
# Calculate total traffic per politician
total_traffic_per_politician <- sco_traffic %>%
group_by(pageid) %>%
summarise(total_traffic = sum(traffic))
# Calculate average traffic per month per politician
average_traffic_per_politician <- total_traffic_per_politician %>%
group_by(pageid) %>%
summarise(average_traffic_per_month = sum(total_traffic) / n_distinct(sco_traffic$date))
# Print the structure of the resulting data frame
str(average_traffic_per_politician)
sco <- average_traffic_per_politician %>%
left_join(select(sco, pageid, sex, wikititle, plain_text), by = "pageid")
View(average_traffic_per_politician)
# Print the structure of the resulting data frame
average_traffic_per_politician <- as.numeric(average_traffic_per_politician$pageid)
sco <- average_traffic_per_politician %>%
left_join(select(sco, pageid, sex, wikititle, plain_text), by = "pageid")
str(sco)
result <- left_join(average_traffic_per_politician, sco, by = "pageid")
str(average_traffic_per_politician)
View(average_traffic_per_month_politician)
total_traffic_per_politician <- sco_traffic %>%
group_by(pageid) %>%
summarise(total_traffic = sum(traffic))
#sanity check - genauso viele views wie in sco_traffic, nur nach politician geordnet
sum(total_traffic_per_politician$total_traffic)
## averge per month per politician
average_traffic_per_politician <- total_traffic_per_politician %>%
mutate(average_traffic_per_month = total_traffic / n_distinct(sco_traffic$date))
View(average_traffic_per_politician)
str(average_traffic_per_politician)
average_traffic_per_politician <- average_traffic_per_politician %>%
mutate(pageid = as.numeric(pageid))
# Perform the left join
result <- left_join(sco, average_traffic_per_politician, by = "pageid")
View(result)
total_traffic_per_politician <- sco_traffic %>%
group_by(pageid) %>%
summarise(total_traffic = sum(traffic))
#sanity check - genauso viele views wie in sco_traffic, nur nach politician geordnet
sum(total_traffic_per_politician$total_traffic)
## averge per month per politician
average_traffic_per_politician <- total_traffic_per_politician %>%
mutate(average_traffic_per_month = total_traffic / n_distinct(sco_traffic$date))
average_traffic_per_politician <- as.numeric(average_traffic_per_politician$pageid)
# Perform the left join
result <- left_join(sco, average_traffic_per_politician, by = "pageid")
total_traffic_per_politician <- sco_traffic %>%
group_by(pageid) %>%
summarise(total_traffic = sum(traffic))
#sanity check - genauso viele views wie in sco_traffic, nur nach politician geordnet
sum(total_traffic_per_politician$total_traffic)
## averge per month per politician
average_traffic_per_politician <- total_traffic_per_politician %>%
mutate(average_traffic_per_month = total_traffic / n_distinct(sco_traffic$date))
#############
average_traffic_per_politician <- average_traffic_per_politician %>%
mutate(pageid = as.numeric(pageid))
# Perform the left join
result <- left_join(sco, average_traffic_per_politician, by = "pageid")
# Perform the left join
sco <- left_join(sco, select(average_traffic_per_politician, pageid, average_traffic), by = "pageid")
total_traffic_per_politician <- sco_traffic %>%
group_by(pageid) %>%
summarise(total_traffic = sum(traffic))
#sanity check - genauso viele views wie in sco_traffic, nur nach politician geordnet
sum(total_traffic_per_politician$total_traffic)
## averge per month per politician
average_traffic_per_politician <- total_traffic_per_politician %>%
mutate(average_traffic = total_traffic / n_distinct(sco_traffic$date))
average_traffic_per_politician <- average_traffic_per_politician %>%
mutate(pageid = as.numeric(pageid))
# Perform the left join
sco <- left_join(sco, select(average_traffic_per_politician, pageid, average_traffic), by = "pageid")
View(sco)
traffic_metrics <- function(traffic_data) {
# Format the date
traffic_data$date <- format(traffic_data$date, "%Y-%m")
# Total per politician
total_traffic_per_politician <- traffic_data %>%
group_by(pageid) %>%
summarise(total_traffic = sum(traffic))
# Average per month per politician
average_traffic_per_politician <- total_traffic_per_politician %>%
mutate(average_traffic = total_traffic / n_distinct(traffic_data$date))
# Convert pageid to numeric
average_traffic_per_politician$pageid <- as.numeric(average_traffic_per_politician$pageid)
# Return the result
return(average_traffic_per_politician)
}
deu_traffic <- get_traffic(legislature = "deu")
deu_average_traffic <- traffic_metrics(deu_traffic)
View(deu_average_traffic)
deu <- left_join(deu, select(deu_traffic, pageid, average_traffic), by = "pageid")
View(deu_traffic)
View(deu_traffic)
View(deu_average_traffic)
deu <- left_join(deu, select(deu_average_traffic, pageid, average_traffic), by = "pageid")
View(deu)
fra_traffic <- get_traffic(legislature = "fra")
fra_average_traffic <- traffic_metrics(fra_traffic)
fra <- left_join(fra, select(fra_average_traffic, pageid, average_traffic), by = "pageid")
View(fra)
gbr_traffic <- get_traffic(legislature = "gbr")
gbr_average_traffic <- traffic_metrics(gbr_traffic)
gbr <- left_join(gbr, select(gbr_average_traffic, pageid, average_traffic), by = "pageid")
can_traffic <- get_traffic(legislature = "can")
can_average_traffic <- traffic_metrics(can_traffic)
can <- left_join(can, select(can_average_traffic, pageid, average_traffic), by = "pageid")
aut_traffic <- get_traffic(legislature = "aut")
aut_average_traffic <- traffic_metrics(aut_traffic)
aut <- left_join(aut, select(aut_average_traffic, pageid, average_traffic), by = "pageid")
esp_traffic <- get_traffic(legislature = "esp")
esp_average_traffic <- traffic_metrics(esp_traffic)
esp <- left_join(esp, select(esp_average_traffic, pageid, average_traffic), by = "pageid")
cze_traffic <- get_traffic(legislature = "cze")
cze_average_traffic <- traffic_metrics(cze_traffic)
cze <- left_join(cze, select(cze_average_traffic, pageid, average_traffic), by = "pageid")
View(esp)
cze_traffic <- get_traffic(legislature = "cze")
cze_average_traffic <- traffic_metrics(cze_traffic)
cze <- left_join(cze, select(cze_average_traffic, pageid, average_traffic), by = "pageid")
View(cze)
sco_traffic <- get_traffic(legislature = "sco")
sco_average_traffic <- traffic_metrics(sco_traffic)
sco <- left_join(sco, select(sco_average_traffic, pageid, average_traffic), by = "pageid")
View(sco)
View(cze)
cze <- cze[, -ncol(cze)]  # Remove the last column
View(cze)
# Rename the second-to-last column
colnames(cze)[ncol(cze)] <- "average_traffic"
sco <- sco[, -ncol(sco)]  # Remove the last column
# Rename the second-to-last column
colnames(sco)[ncol(sco)] <- "average_traffic"
View(sco)
irl_traffic <- get_traffic(legislature = "irl")
irl_average_traffic <- traffic_metrics(irl_traffic)
irl <- left_join(irl, select(irl_average_traffic, pageid, average_traffic), by = "pageid")
usa_traffic <- get_traffic(legislature = "usa")
usa_house_traffic <- get_traffic(legislature = "usa_house")
usa_senate_traffic <- get_traffic(legislature = "usa_senate")
usa_traffic <- bind_rows(usa_house_traffic, usa_senate_traffic)
usa_average_traffic <- traffic_metrics(usa_traffic)
usa <- left_join(usa, select(usa_average_traffic, pageid, average_traffic), by = "pageid")
View(usa_traffic)
View(usa)
write.csv(usa, file = "clean_data/usa.csv", row.names = FALSE)
write.csv(usa, file = "clean_data/usa.csv", row.names = FALSE)
write.csv(deu, file = "clean_data/deu.csv", row.names = FALSE)
write.csv(esp, file = "clean_data/esp.csv", row.names = FALSE)
write.csv(gbr, file = "clean_data/gbr.csv", row.names = FALSE)
write.csv(cze, file = "clean_data/cze.csv", row.names = FALSE)
write.csv(sco, file = "clean_data/sco.csv", row.names = FALSE)
write.csv(irl, file = "clean_data/irl.csv", row.names = FALSE)
write.csv(can, file = "clean_data/can.csv", row.names = FALSE)
write.csv(aut, file = "clean_data/aut.csv", row.names = FALSE)
write.csv(fra, file = "clean_data/fra.csv", row.names = FALSE)
#combine all data in one df
all_countries <- rbind(deu, cze, fra, usa, gbr, sco, irl, esp, can, aut)
#combine all data in one df
all_countries <- rbind(deu, cze, fra, usa, gbr, sco, irl, can, aut) #without esp as it contains NAs
View(aut)
View(can)
View(cze)
View(deu)
View(fra)
View(gbr)
gbr_traffic <- get_traffic(legislature = "gbr")
gbr_average_traffic <- traffic_metrics(gbr_traffic)
gbr <- left_join(gbr, select(gbr_average_traffic, pageid, average_traffic), by = "pageid")
View(irl)
View(sco)
View(usa)
#combine all data in one df
all_countries <- rbind(deu, cze, fra, usa, sco, irl, can, aut) #without esp, gbr
ggplot(all_countries, aes(x = sex, y = average_traffic, fill = sex)) +
geom_bar(stat = "identity") +
facet_wrap(~country, scales = "free_y") +
labs(title = "Average Traffic per Country and Sex",
x = "Sex",
y = "Average Traffic") +
scale_fill_manual(values = c("male" = "blue", "female" = "pink")) +
theme_minimal() +
theme(legend.title = element_blank())
View(all_countries)
ggplot(all_countries, aes(x = average_traffic, fill = sex)) +
geom_bar(stat = "count", position = "dodge") +
labs(x = "Average Monthly Traffic (Grouped)", y = "Count", title = "Distribution of Average Monthly Traffic by Gender") +
scale_fill_manual(values = c("blue", "pink")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(all_countries, aes(x = sex, y = average_traffic, fill = sex)) +
geom_bar(stat = "identity") +
facet_wrap(~country, scales = "free_y") +
labs(title = "Average Traffic per Country and Sex",
x = "Sex",
y = "Average Traffic") +
scale_fill_manual(values = c("male" = "blue", "female" = "pink")) +
theme_minimal() +
theme(legend.title = element_blank())
ggplot(all_countries, aes(x = sex, y = average_traffic, fill = sex)) +
geom_boxplot() +
facet_wrap(~country, scales = "free_y") +
labs(title = "Distribution of Average Traffic per Country and Sex",
x = "Sex",
y = "Average Traffic") +
scale_fill_manual(values = c("male" = "blue", "female" = "pink")) +
theme_minimal() +
theme(legend.title = element_blank())
ggplot(all_countries, aes(x = sex, y = average_traffic)) +
geom_boxplot(aes(fill = sex)) +
facet_wrap(~country, scales = "free_y") +
labs(title = "Distribution of Average Traffic per Country and Sex",
x = "Sex",
y = "Average Traffic") +
scale_fill_manual(values = c("male" = "blue", "female" = "pink")) +
theme_minimal() +
theme(legend.position = "none")
ggplot(all_countries, aes(x = sex, y = average_traffic, fill = sex)) +
geom_boxplot() +
facet_wrap(~country, scales = "free_y") +
labs(title = "Distribution of Average Traffic per Country and Sex",
x = "Sex",
y = "Average Traffic") +
scale_fill_manual(values = c("male" = "blue", "female" = "pink")) +
theme_minimal() +
theme(legend.position = "none")
ggplot(all_countries, aes(x = sex, y = average_traffic, color = sex)) +
geom_boxplot() +
facet_wrap(~country, scales = "free_y") +
labs(title = "Distribution of Average Traffic per Country and Sex",
x = "Sex",
y = "Average Traffic") +
scale_color_manual(values = c("male" = "blue", "female" = "pink")) +
theme_minimal() +
theme(legend.position = "none")
View(aut)
ggplot(all_countries, aes(x = average_traffic, fill = sex)) +
geom_density(alpha = 0.5) +
facet_wrap(~country, scales = "free_y") +
labs(title = "Distribution of Average Traffic per Country by Sex",
x = "Average Traffic",
y = "Density") +
scale_fill_manual(values = c("male" = "blue", "female" = "pink")) +
theme_minimal() +
theme(legend.title = element_blank())
ggplot(all_countries, aes(x = average_traffic, fill = sex)) +
geom_histogram(position = "identity", alpha = 0.7, bins = 30) +
facet_wrap(~country, scales = "free_y") +
labs(title = "Distribution of Average Traffic per Country by Sex",
x = "Average Traffic",
y = "Count") +
scale_fill_manual(values = c("male" = "blue", "female" = "pink")) +
theme_minimal() +
theme(legend.title = element_blank())
ggplot(all_countries, aes(x = sex, y = average_traffic, color = sex)) +
geom_boxplot() +
facet_wrap(~country, scales = "free_y") +
labs(title = "Distribution of Average Traffic per Country and Sex",
x = "Sex",
y = "Average Traffic") +
scale_color_manual(values = c("male" = "blue", "female" = "pink")) +
theme_minimal() +
theme(legend.position = "none")
View(deu)
View(sco)
