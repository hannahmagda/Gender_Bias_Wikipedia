}
min_p = 0.01
calculate_pmi_and_filter <- function(corpus_transposed, corpus_name, min_p = 0.001) {
# Calculate total counts
total_male_count <- sum(corpus_transposed$male)
total_female_count <- sum(corpus_transposed$female)
total_count <- total_male_count + total_female_count
# Calculate probabilities for each class
p_c_male <- total_male_count / total_count
p_c_female <- total_female_count / total_count
#summe muss 100 ergeben
# Add PMI calculations to the DataFrame
pmi_df <- corpus_transposed %>%
mutate(p_w = (male + female) / total_count,
p_male_w = male / total_count,
p_female_w = female / total_count,
PMI_male = log(p_male_w / (p_w * p_c_male)) / -log(p_male_w),
PMI_female = log(p_female_w / (p_w * p_c_female)) / -log(p_female_w))
# Filter for top female words
top_female <- pmi_df %>%
filter(p_w > min_p) %>%
arrange(desc(PMI_female)) %>%
head(100)
# Filter for top male words
top_male <- pmi_df %>%
filter(p_w > min_p) %>%
arrange(desc(PMI_male)) %>%
head(100)
# Save to CSV
write.csv(top_female, sprintf("data/pmi_list/%s_pmi_female.csv", corpus_name), row.names = FALSE)
write.csv(top_male, sprintf("data/pmi_list/%s_pmi_male.csv", corpus_name), row.names = FALSE)
# Return a list containing both dataframes
return(list(top_female = top_female, top_male = top_male))
}
#whole sample, live section
# Step 1:
corpus <- prepare_corpus(deu, "extracted_text")
# Step 2:
corpus_transposed <- process_corpus(corpus, gender_neutral_replacements, words_to_remove)
# Step 3:
results <- calculate_pmi_and_filter(corpus_transposed, "deu_live")
#whole sample career/party section
# Step 1:
corpus <- prepare_corpus(deu, "career_text")
# Step 2:
corpus_transposed <- process_corpus(corpus, gender_neutral_replacements, words_to_remove)
# Step 3:
results <- calculate_pmi_and_filter(corpus_transposed, "deu_career")
prepare_corpus <- function(data_frame, text_column) {
# Ensure the sex column is complete
df_copy <- data_frame
df_copy <- df_copy[complete.cases(df_copy$sex), ]
# Convert the sex column to numeric (male = 0, female = 1)
df_copy$sex <- ifelse(df_copy$sex == "male", 0, 1)
# Summarize the text data by sex
summary_df <- df_copy %>%
group_by(sex) %>%
summarise(text = paste(!!sym(text_column), collapse = " ")) %>%
ungroup()
# Create the corpus
corpus_created <- corpus(summary_df, docid_field = "sex")
return(corpus_created)
}
gender_neutral_replacements <- c(
"Politikerin" = "Politiker",
"Lehrerin" = "Lehrer",
"Sprecherin" = "Sprecher",
"Wissenschaftlerin" = "Wissenschaftler",
"Direktkandidatin" = "direktkandidat",
"Staatssekretärin" = "Staatssekretär",
"Mitarbeiterin" = "Mitarbeiter",
"Leiterin" = "Leiter",
"Geschäftsführerin" ="Geschäftsführer",
"Referentin" ="referent",
"Spitzenkandidatin" ="Spitzenkandidat",
"Staatsministerin" = "Staatsminister",
"Ministerin" ="Minister",
"Rechtsanwältin" ="Rechtsanwalt",
"Statträtin" = "Stadtrat",
"Generalsekretärin" ="Generalsekretär",
"Senatorin" = "Senator",
"Richterin" ="Richter",
"Assistentin" = "assistent",
"Bürgermeisterin" = "Bürgermeister",
"Präsidentin" = "Präsident",
"Vizepräsidentin" = "Vizepräsident",
"Obfrau" = "Obmann",
"Kandidatin"= "Kandidat",
"Anwältin" = "Anwalt",
"Apothekerin"="Apotheker",
"Betreuerin" ="Betreuer",
"Betriebswirtin" = "Btriebswirtin",
"Dezernentin" ="Dezernent",
"Diplom-Volkswirtin" ="Diplom-Volkswirt",
"Direktorin" = "Direktor",
"Dozentin" = "Dozent",
"Erzieherin"="Erzieher",
"Fachärztin" = "Facharzt",
"Familientherapeutin" ="Familientherapeut",
"Fotografin"="Fotograf",
"Gründerin"="Gründer",
"Hauswirtschaftsleiterin"="Hasuwirtschaftsleiter",
"Journalistin" = "Journalist",
"Juristin" = "Jurist",
"Köchin" ="Koch",
"Korrespondentin" ="Korrespondent",
"Krankenpflegerin" = "Krankenpfleger",
"Kunsthistorikerin" = "Kunsthistoriker",
"Landrätin" ="Landrat",
"Lebensgefährtin" = "Lebensgefährt",
"Nachfolgerin" = "Nachfolger",
"Oberbürgermeisterin" = "oberbürgermeister",
"Postbeamtin" = "Postbeamte",
"Schauspielerin" = "Schauspieler",
"Schneiderin" = "Schneider",
"Schriftstellerin" = "Schriftsteller",
"Sekretärin"="Sekretär",
"Sprachlehrerin"="Sprachlehrer",
"Stadträtin" ="Stadtrat",
"Supervisorin"="Supervisor",
"Unternehmerin"="Unternehmer",
"Verkäuferin"="Verkäufer",
"Wirtschaftsingenieurin" ="Wirtschaftsingenieur",
"Ärztin"="Arzt",
"Gräfin" ="graf",
"Partnerin"="partner",
"Bundeskanzlerin"="Bundeskanzler",
"Betriebswirtin"="betriebswirt",
"industriekauffrau"="Industriekaufmann",
"Einzelhandelskauffrau"="Einzelhandelskaufmann",
"bankkauffrau"="Bankkaufmann",
"Autorin" = "autor",
"Stenotypistin" = "stenotypist",
"Pädagogin"="Padagoge",
"Stellvertreterin" ="Stellvertreter",
"Bundesministerin" = "bundesminister",
"Biologin" = "Biologe",
"Schülerin" = "Schüler",
"Verlegerin" = "Verleger",
"Btriebswirtin" = "Betriebswirt",
"Staatsrätin" = "Staatsrat",
"Fabrikarbeiterin" = "Fabrikarbeiter",
"Steuerberaterin" = "Steuerberater",
"Buchhalterin" = "Buchhalter",
"Architektin" = "Architekt",
"Justizsenatorin" = "Justizsenator",
"Hauswirtschaftslehrerin" = "hauswirtschaftslehrer",
"Gymnasiallehrerin" = "Gymnasiallehrer",
"Sozialarbeiterin" ="Sozialarbeiter",
"Studienrätin" = "Studienrat",
"Diplom-Kauffrau" = "Diplom-Kaufmann",
"Soldatin" = "Soldat",
"Landwirtin" = "Landwirt",
"Redakteurin" = "Redakteur",
"Professorin" = "Professor",
"Notarin" ="Notar",
"Prokuristin" = "Prokurist",
"Diplom-Igenieurin" = "Diplom-Ingenieur",
"Gewerkschaftssekretärin" = "Gewerkschaftssekretär",
"Nationalsozialistin" = "Nationalsozialist",
"Chefredakteurin" = "Chefredakteur",
"Bundesgeschaftsführerin" = "Bundesgeschaftsfuhrer",
"Kommunalpolitikerin" = "Kommunalpolitiker",
"wurde" = "", #other words to remove
"wurden" = "",
"jahn" = "",
"Gustav" =""
)
#namen extrahieren
first_words <- vapply(strsplit(deu$plain_text, "\\s+"), function(x) gsub("[,;:.!?]+$", "", x[1]), character(1))
second_words <- vapply(strsplit(deu$plain_text, "\\s+"), function(x) ifelse(length(x) > 1, gsub("[,;:.!?]+$", "", x[2]), ""), character(1))
#name_words <- unlist(strsplit(deu$name, " "))
months <- c("januar", "februar", "märz", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "dezember")
cities <- c("berlin", "heidelberg", "hamburg", "münchen", "köln", "frankfurt",
"stuttgart", "düsseldorf", "dortmund", "essen", "leipzig",
"bremen", "dresden", "hannover", "nürnberg", "duisburg",
"bochum", "wuppertal", "bielefeld", "bonn", "münster",
"karlsruhe", "mannheim", "augsburg", "wiesbaden", "gelsenkirchen",
"mönchengladbach", "braunschweig", "chemnitz", "kiel", "aachen",
"halle", "magdeburg", "freiburg im breisgau", "krefeld",
"lübeck", "oberhausen", "erfurt", "mainz", "rostock", "kassel",
"hagen", "hamm", "saarbrücken", "mülheim an der ruhr", "potsdam",
"ludwigshafen", "oldenburg", "leverkusen", "osnabrück", "bonn")
##############namen problem
words_to_remove <- unique(c(first_words, second_words, months, cities, stopwords("de")))
#words_to_remove <- unique(c(name_words, stopwords("de")))
process_corpus <- function(corpus, gender_neutral_replacements, words_to_remove) {
# Tokenizing the corpus with specific removals and replacements
tokens <- tokens(corpus, remove_punct = TRUE, remove_numbers = TRUE, remove_symbols = TRUE) %>%
tokens_tolower() %>%
tokens_replace(pattern = names(gender_neutral_replacements), replacement = gender_neutral_replacements, case_insensitive = TRUE) %>%
tokens_remove(pattern = words_to_remove, padding = FALSE) %>%
tokens_wordstem(language = "german")%>%
tokens_remove(pattern = words_to_remove, padding = FALSE)
# Creating the DFM
dfmat <- dfm(tokens)
# Printing the result to check
print(dfmat)
# Converting the DFM to a data frame
corpus_df <- convert(dfmat, to = "data.frame")
# Setting the first column as row names
rownames(corpus_df) <- corpus_df[, 1]
# Removing the first column from the DataFrame
corpus_df <- corpus_df[, -1]
# Keeping only words that appear in both genders by filtering out columns with zeros
zero_count_per_column <- colSums(corpus_df == 0)
corpus_common <- corpus_df[, zero_count_per_column == 0]
# Transposing the matrix to swap rows and columns
corpus_transposed <- t(corpus_common)
# Converting the transposed matrix back to a DataFrame and adjusting columns
corpus_transposed <- as.data.frame(corpus_transposed)
corpus_transposed$word <- rownames(corpus_transposed)
rownames(corpus_transposed) <- NULL
colnames(corpus_transposed) <- c("male", "female", "word")
return(corpus_transposed)
}
min_p = 0.01
calculate_pmi_and_filter <- function(corpus_transposed, corpus_name, min_p = 0.001) {
# Calculate total counts
total_male_count <- sum(corpus_transposed$male)
total_female_count <- sum(corpus_transposed$female)
total_count <- total_male_count + total_female_count
# Calculate probabilities for each class
p_c_male <- total_male_count / total_count
p_c_female <- total_female_count / total_count
#summe muss 100 ergeben
# Add PMI calculations to the DataFrame
pmi_df <- corpus_transposed %>%
mutate(p_w = (male + female) / total_count,
p_male_w = male / total_count,
p_female_w = female / total_count,
PMI_male = log(p_male_w / (p_w * p_c_male)) / -log(p_male_w),
PMI_female = log(p_female_w / (p_w * p_c_female)) / -log(p_female_w))
# Filter for top female words
top_female <- pmi_df %>%
filter(p_w > min_p) %>%
arrange(desc(PMI_female)) %>%
head(100)
# Filter for top male words
top_male <- pmi_df %>%
filter(p_w > min_p) %>%
arrange(desc(PMI_male)) %>%
head(100)
# Save to CSV
write.csv(top_female, sprintf("data/pmi_list/%s_pmi_female.csv", corpus_name), row.names = FALSE)
write.csv(top_male, sprintf("data/pmi_list/%s_pmi_male.csv", corpus_name), row.names = FALSE)
# Return a list containing both dataframes
return(list(top_female = top_female, top_male = top_male))
}
#whole sample, live section
# Step 1:
corpus <- prepare_corpus(deu, "extracted_text")
# Step 2:
corpus_transposed <- process_corpus(corpus, gender_neutral_replacements, words_to_remove)
# Step 3:
results <- calculate_pmi_and_filter(corpus_transposed, "deu_live")
#whole sample career/party section
# Step 1:
corpus <- prepare_corpus(deu, "career_text")
# Step 2:
corpus_transposed <- process_corpus(corpus, gender_neutral_replacements, words_to_remove)
# Step 3:
results <- calculate_pmi_and_filter(corpus_transposed, "deu_career")
#whole sample, live section########################################################################################
# Step 1:
corpus <- prepare_corpus(deu, "extracted_text")
# Step 2:
corpus_transposed <- process_corpus(corpus, gender_neutral_replacements, words_to_remove)
# Step 3:
results <- calculate_pmi_and_filter(corpus_transposed, "deu_live")
#whole sample career/party section########################################################################################
# Step 1:
corpus <- prepare_corpus(deu, "career_text")
# Step 2:
corpus_transposed <- process_corpus(corpus, gender_neutral_replacements, words_to_remove)
# Step 3:
results <- calculate_pmi_and_filter(corpus_transposed, "deu_career")
#matched data live section########################################################################################
# Step 1:
corpus <- prepare_corpus(matched_data, "extracted_text")
# Step 2:
corpus_transposed <- process_corpus(corpus, gender_neutral_replacements, words_to_remove)
# Perform the t-test
t_test_result <- t.test(text_length ~ sex, data = deu)
deu_political <- read.csv("deu_political.csv")
deu_traffic <- read.csv("deu_traffic.csv")
knitr::opts_knit$set(root.dir = '/Users/hannahschweren/Documents/Zukunft/Master/drittes semester/thesis/Code/thesis')
deu_political <- read.csv("deu_political.csv")
deu_traffic <- read.csv("deu_traffic.csv")
deu_political <- read.csv("data/clean/deu_political.csv")
knitr::opts_knit$set(root.dir = '/Users/hannahschweren/Documents/Zukunft/Master/drittes semester/thesis/Code/thesis')
deu_political <- read.csv("data/clean/deu_political.csv")
deu <- read.csv("data/clean/deu.csv")
deu_political <- read.csv("data/raw/deu_political.csv")
deu_traffic <- read.csv("data/raw/deu_traffic.csv")
View(deu)
deu <- read.csv("data/clean/deu.csv")
matched_data <- read.csv("data/clean/matched_data.csv")
deu_political <- read.csv("data/raw/deu_political.csv")
deu_traffic <- read.csv("data/raw/deu_traffic.csv")
deu_text <- read.csv("data/raw/deu_text.csv")
deu_office <- read.csv("data/raw/deu_offices.csv")
deu_political <- read.csv("data/raw/deu_political.csv")
deu_traffic <- read.csv("data/raw/deu_traffic.csv")
deu_text <- read.csv("data/raw/deu_text.csv")
deu_office <- read.csv("data/raw/deu_offices.csv")
# function to extract "live" or "party/career" section
extract_content <- function(text, section = 1) {
tryCatch({
parts <- str_split(text, "\\[Bearbeiten \\| Quelltext bearbeiten\\]")[[1]]
if (length(parts) > section) {
content_between = parts[section]
paragraph_positions <- str_locate_all(content_between, "\n\n")[[1]][,1]
if (length(paragraph_positions) > 0) {
last_paragraph_pos <- max(paragraph_positions, na.rm = TRUE)
return(substr(content_between, 1, last_paragraph_pos))
} else {
return(content_between)
}
} else {
return(NA)
}
}, error = function(e) {
NA
})
}
###################################################################################################
#function to clean the aquired text data
clean_data <- function(df) {
initial_rows <- nrow(df)
# Remove CSS-like structures
#df$plain_text <- str_remove_all(df$plain_text, "\\..*?\\{.*?\\}")
# Initialize counters for removal reasons
removal_reason_redirect <- sum(grepl("^(Redirect to:|Weiterleitung nach:|Rediriger vers:|Redirige a:|Přesměrování na:)", df$plain_text, ignore.case = TRUE))
removal_reason_refering_page <- sum(grepl("may refer to:|ist der Name folgender Personen:|Cette page d'homonymie répertorie différentes personnes|může být:", df$plain_text, ignore.case = TRUE))
removal_reason_not_found <- sum(grepl("^(Error fetching content for page:|No Wikipedia page name provided or missing|Es wurde kein Wikipedia-Seitenname angegeben)", df$plain_text, ignore.case = TRUE))
# Filter rows based on specific conditions
df <- df %>%
filter(!grepl("^(Redirect to:|Weiterleitung nach:|Rediriger vers:|Redirige a:|Přesměrování na:)", plain_text, ignore.case = TRUE) &
!grepl("may refer to:|ist der Name folgender Personen:|Cette page d'homonymie répertorie différentes personnes|může být:", plain_text, ignore.case = TRUE) &
!grepl("Error fetching content for page:|No Wikipedia page name provided or missing|Es wurde kein Wikipedia-Seitenname angegeben", plain_text, ignore.case = TRUE))
# Calculate the number of rows removed
rows_removed <- initial_rows - nrow(df)
# Print statistics about the removal reasons
cat("Removal reasons:\n")
cat("  - Redirect:", removal_reason_redirect, "\n")
cat("  - Reference Page:", removal_reason_refering_page, "\n")
cat("  - Not Found/no name_provided:", removal_reason_not_found, "\n")
# Create a message about the cleaning process
cat("Cleaned data: Removed", rows_removed, "rows.\n")
# Return the cleaned data frame
return(df)
}
#############################################################################################################
check_office <- function(wikidataid, offices_dataset) {
# Extrahiere die Zeile für den gegebenen wikidataid
office_row <- offices_dataset[offices_dataset$wikidataid == wikidataid, ]
# Definiere die spezifischen Spalten, die geprüft werden sollen
specific_columns <- c("bundesminister", "federal_chancellor_of_germany",
"president_of_germany", "president_of_the_bundestag")
# Füge zusätzlich alle Spalten hinzu, die mit "federal_minister" beginnen
federal_minister_columns <- grep("^federal_minister", names(offices_dataset), value = TRUE)
# Kombiniere alle relevanten Spalten
relevant_columns <- c(specific_columns, federal_minister_columns)
# Beachte, dass nur Spalten geprüft werden, die auch im DataFrame existieren
relevant_columns <- relevant_columns[relevant_columns %in% names(office_row)]
# Prüfe, ob in einer der relevanten Spalten TRUE steht
# Stelle sicher, dass NA als FALSE behandelt wird
any_true <- any(office_row[relevant_columns] == TRUE, na.rm = TRUE)
# Wenn keine relevanten Spalten existieren oder alle FALSE sind, wird FALSE zurückgegeben
return(ifelse(length(any_true) == 0, FALSE, any_true))
}
#clean the data
deu <- clean_data(deu_text)
#extract "live" section
deu <- deu %>%
mutate(extracted_text = map_chr(plain_text, ~possibly(extract_content, otherwise = NA_character_)(.x, section = 2)))
View(deu)
#extract "party/career" section
deu <- deu %>%
mutate(career_text = map_chr(plain_text, ~possibly(extract_content, otherwise = NA_character_)(.x, section = 3)))
#extract "live" section
deu <- deu %>%
mutate(extracted_text_old = map_chr(old_text, ~possibly(extract_content, otherwise = NA_character_)(.x, section = 2)))
#extract "party/career" section
deu <- deu %>%
mutate(career_text_old = map_chr(old_text, ~possibly(extract_content, otherwise = NA_character_)(.x, section = 3)))
View(deu)
deu <- deu %>%
mutate(text_length_live = nchar(extracted_text))
deu <- deu %>%
mutate(text_length_career = nchar(career_text))
deu <- deu %>%
mutate(text_length = nchar(plain_text))
View(deu)
#only keep oldest session if there are several sessions for one person and sum up service time
deu_political <- deu_political %>%
group_by(pageid) %>%
mutate(
total_service = if (n() > 1) sum(service, na.rm = TRUE) else if_else(!is.na(service), service, 0)
) %>%
slice(which.min(session)) %>%
ungroup()
#sum of traffic data per politician
total_traffic_per_politician <- deu_traffic %>%
group_by(pageid) %>%
summarise(total_traffic = sum(traffic))
deu_political$pageid <- as.integer(deu_political$pageid)
deu <- left_join(deu, select(deu_political, pageid, session, party, total_service), by = "pageid")
total_traffic_per_politician$pageid <- as.integer(total_traffic_per_politician$pageid)
deu <- left_join(deu, select(total_traffic_per_politician, pageid, total_traffic), by = "pageid")
deu$birthyear <- substr(deu$birth, 1, 4)
deu$birthyear <- as.numeric(as.character(deu$birthyear))
#new variable to indicate if politician had an important office
deu$important_office <- sapply(deu$wikidataid, check_office, offices_dataset = deu_office)
deu <- deu[complete.cases(deu$sex), ]
deu$sex <- ifelse(deu$sex == "male", 0, 1)
match_obj <- matchit(sex ~ birthyear + total_service + total_traffic + party + important_office + session,
data = deu, method = "nearest", distance = "logit",
exact = "session", # Exaktes Matching auf 'session'
ratio = 1, replace = FALSE)
#get matched data
matched_data <- match.data(match_obj)
deu$sex <- ifelse(deu$sex == 0, "male", "female")
matched_data$sex <- ifelse(matched_data$sex == 0, "male", "female")
write.csv(deu, file = "data/clean/deu.csv", row.names = FALSE)
write.csv(matched_data, file = "data/clean/matched_data.csv", row.names = FALSE)
View(deu)
deu <- read.csv("data/clean/deu.csv")
View(deu)
# Perform the t-test
t_test_result <- t.test(text_length ~ sex, data = deu)
# Create the box plot
p <- ggplot(deu, aes(x = sex, y = text_length)) +
geom_boxplot() +
geom_point(position = position_jitter(width = 0.2), alpha = 0.5) +
theme_minimal() +
labs(title = "Comparison of text length by gender",
x = "gender",
y = "text length")
# # Annotate with the mean values
# data_means <- aggregate(readability_score ~ academic_status, data = data, mean)
# for(i in 1:nrow(data_means)) {
#   p <- p + geom_text(aes(x = academic_status[i], y = max(data$readability_score), label = paste("Mean =", round(data_means$readability_score[i], 2))), vjust = -0.5)
# }
# # Annotate with the p-value from the t-test
# p <- p + annotate("text", x = 1.5, y = max(data$readability_score), label = paste("p-value =", round(t_test_result$p.value, 4)), vjust = 1)
# Print the plot
print(p)
plot_density_comparison <- function(data, numeric_var_name, group_var_name = "academic_status") {
# Ensure the variable names are non-empty and exist in the dataframe
if (!numeric_var_name %in% names(data)) {
stop("Numeric variable name does not exist in the dataframe.")
}
if (!group_var_name %in% names(data)) {
stop("Group variable name does not exist in the dataframe.")
}
# Use ggplot to create the density plot
p <- ggplot(data, aes_string(x = numeric_var_name, fill = group_var_name)) +
geom_density(alpha = 0.5) + # Adjust alpha for transparency
labs(x = numeric_var_name, y = "Density") + # Labels
ggtitle(paste("Density of", numeric_var_name, "by", group_var_name)) +
scale_fill_manual(values = c("academic" = "skyblue", "non-academic" = "pink")) + # Customize colors
theme_minimal() # Use a minimal theme for a nicer plot
return(p)
}
# Example usage with your dataframe 'data' and the variable 'readability_score'
plot1 <- plot_density_comparison(deu, "text_length")
plot_density_comparison <- function(data, numeric_var_name, group_var_name = "text_length") {
# Ensure the variable names are non-empty and exist in the dataframe
if (!numeric_var_name %in% names(data)) {
stop("Numeric variable name does not exist in the dataframe.")
}
if (!group_var_name %in% names(data)) {
stop("Group variable name does not exist in the dataframe.")
}
# Use ggplot to create the density plot
p <- ggplot(data, aes_string(x = numeric_var_name, fill = group_var_name)) +
geom_density(alpha = 0.5) + # Adjust alpha for transparency
labs(x = numeric_var_name, y = "Density") + # Labels
ggtitle(paste("Density of", numeric_var_name, "by", group_var_name)) +
scale_fill_manual(values = c("academic" = "skyblue", "non-academic" = "pink")) + # Customize colors
theme_minimal() # Use a minimal theme for a nicer plot
return(p)
}
# Example usage with your dataframe 'data' and the variable 'readability_score'
plot1 <- plot_density_comparison(deu, "text_length")
plot_density_comparison <- function(data, numeric_var_name, group_var_name = NULL) {
# Ensure the variable names are non-empty and exist in the dataframe
if (!numeric_var_name %in% names(data)) {
stop("Numeric variable name does not exist in the dataframe.")
}
# Initialize aes mapping
aes_mapping <- aes(x = !!sym(numeric_var_name))
# Add fill aesthetic if group variable name is provided and exists in the dataframe
if (!is.null(group_var_name) && group_var_name %in% names(data)) {
aes_mapping <- aes_mapping + aes(fill = !!sym(group_var_name))
}
# Use ggplot to create the density plot
p <- ggplot(data, aes_mapping) +
geom_density(alpha = 0.5) + # Adjust alpha for transparency
labs(x = numeric_var_name, y = "Density") + # Labels
ggtitle(paste("Density of", numeric_var_name, if(!is.null(group_var_name)) paste("by", group_var_name) else "")) +
theme_minimal() # Use a minimal theme for a nicer plot
# Conditionally add a color scale if a group variable is provided
if (!is.null(group_var_name)) {
p <- p + scale_fill_manual(values = c("academic" = "skyblue", "non-academic" = "pink")) # Customize colors
}
return(p)
}
plot1 <- plot_density_comparison(deu, "text_length")
plot1 <- plot_density_comparison(deu, "text_length")
