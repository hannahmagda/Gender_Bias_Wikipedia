"Rechtsanwältin" ="Rechtsanwalt",
"Statträtin" = "Stadtrat",
"Generalsekretärin" ="Generalsekretär",
"Senatorin" = "Senator",
"Richterin" ="Richter",
"Assistentin" = "assistent",
"Bürgermeisterin" = "Bürgermeister",
"Präsidentin" = "Präsident",
"Vizepräsidentin" = "Vizepräsident",
"Obfrau" = "Obmann",
"Kandidatin"= "Kandidat",
"Anwältin" = "Anwalt",
"Apothekerin"="Apotheker",
"Betreuerin" ="Betreuer",
"Betriebswirtin" = "Btriebswirtin",
"Dezernentin" ="Dezernent",
"Diplom-Volkswirtin" ="Diplom-Volkswirt",
"Direktorin" = "Direktor",
"Dozentin" = "Dozent",
"Erzieherin"="Erzieher",
"Fachärztin" = "Facharzt",
"Familientherapeutin" ="Familientherapeut",
"Fotografin"="Fotograf",
"Gründerin"="Gründer",
"Hauswirtschaftsleiterin"="Hasuwirtschaftsleiter",
"Journalistin" = "Journalist",
"Juristin" = "Jurist",
"Köchin" ="Koch",
"Korrespondentin" ="Korrespondent",
"Krankenpflegerin" = "Krankenpfleger",
"Kunsthistorikerin" = "Kunsthistoriker",
"Landrätin" ="Landrat",
"Lebensgefährtin" = "Lebensgefährt",
"Nachfolgerin" = "Nachfolger",
"Oberbürgermeisterin" = "oberbürgermeister",
"Postbeamtin" = "Postbeamte",
"Schauspielerin" = "Schauspieler",
"Schneiderin" = "Schneider",
"Schriftstellerin" = "Schriftsteller",
"Sekretärin"="Sekretär",
"Sprachlehrerin"="Sprachlehrer",
"Stadträtin" ="Stadtrat",
"Supervisorin"="Supervisor",
"Unternehmerin"="Unternehmer",
"Verkäuferin"="Verkäufer",
"Wirtschaftsingenieurin" ="Wirtschaftsingenieur",
"Ärztin"="Arzt",
"Gräfin" ="graf",
"Partnerin"="partner",
"Bundeskanzlerin"="Bundeskanzler",
"Betriebswirtin"="betriebswirt",
"industriekauffrau"="Industriekaufmann",
"Einzelhandelskauffrau"="Einzelhandelskaufmann",
"bankkauffrau"="Bankkaufmann",
"Autorin" = "autor",
"Stenotypistin" = "stenotypist",
"Pädagogin"="Padagoge",
"Stellvertreterin" ="Stellvertreter",
"Bundesministerin" = "bundesminister",
"Biologin" = "Biologe",
"Schülerin" = "Schüler",
"Verlegerin" = "Verleger",
"Btriebswirtin" = "Betriebswirt",
"Staatsrätin" = "Staatsrat",
"Fabrikarbeiterin" = "Fabrikarbeiter",
"Steuerberaterin" = "Steuerberater",
"Buchhalterin" = "Buchhalter",
"Architektin" = "Architekt",
"Justizsenatorin" = "Justizsenator",
"Hauswirtschaftslehrerin" = "hauswirtschaftslehrer",
"Gymnasiallehrerin" = "Gymnasiallehrer",
"Sozialarbeiterin" ="Sozialarbeiter",
"Studienrätin" = "Studienrat",
"Diplom-Kauffrau" = "Diplom-Kaufmann",
"Soldatin" = "Soldat",
"Landwirtin" = "Landwirt",
"Redakteurin" = "Redakteur",
"Professorin" = "Professor",
"Notarin" ="Notar",
"Prokuristin" = "Prokurist",
"Diplom-Igenieurin" = "Diplom-Ingenieur",
"Gewerkschaftssekretärin" = "Gewerkschaftssekretär",
"Nationalsozialistin" = "Nationalsozialist",
"Chefredakteurin" = "Chefredakteur"
)
#namen extrahieren
first_words <- vapply(strsplit(matched_data$plain_text, "\\s+"), function(x) gsub("[,;:.!?]+$", "", x[1]), character(1))
second_words <- vapply(strsplit(matched_data$plain_text, "\\s+"), function(x) ifelse(length(x) > 1, gsub("[,;:.!?]+$", "", x[2]), ""), character(1))
##############namen problem
words_to_remove <- unique(c(first_words, second_words, stopwords("de")))
process_corpus <- function(corpus, gender_neutral_replacements, words_to_remove) {
# Tokenizing the corpus with specific removals and replacements
tokens <- tokens(corpus, remove_punct = TRUE, remove_numbers = TRUE, remove_symbols = TRUE) %>%
tokens_replace(pattern = names(gender_neutral_replacements), replacement = gender_neutral_replacements, case_insensitive = TRUE) %>%
tokens_remove(pattern = words_to_remove, padding = FALSE) %>%
tokens_wordstem(language = "german")
# Creating the DFM
dfmat <- dfm(tokens)
# Printing the result to check
print(dfmat)
# Converting the DFM to a data frame
corpus_df <- convert(dfmat, to = "data.frame")
# Setting the first column as row names
rownames(corpus_df) <- corpus_df[, 1]
# Removing the first column from the DataFrame
corpus_df <- corpus_df[, -1]
# Keeping only words that appear in both genders by filtering out columns with zeros
zero_count_per_column <- colSums(corpus_df == 0)
corpus_common <- corpus_df[, zero_count_per_column == 0]
# Transposing the matrix to swap rows and columns
corpus_transposed <- t(corpus_common)
# Converting the transposed matrix back to a DataFrame and adjusting columns
corpus_transposed <- as.data.frame(corpus_transposed)
corpus_transposed$word <- rownames(corpus_transposed)
rownames(corpus_transposed) <- NULL
colnames(corpus_transposed) <- c("male", "female", "word")
return(corpus_transposed)
}
# calculate_pmi_and_filter <- function(corpus_transposed, min_p = 0.01) {
#   # Calculate total counts
#   total_male_count <- sum(corpus_transposed$male)
#   total_female_count <- sum(corpus_transposed$female)
#   total_count <- total_male_count + total_female_count
#
#   # Calculate probabilities for each class
#   p_c_male <- total_male_count / total_count
#   p_c_female <- total_female_count / total_count
#
#   # Add PMI calculations to the DataFrame
#   pmi_df <- corpus_transposed %>%
#     mutate(p_w = (male + female) / total_count,
#            p_male_w = male / total_count,
#            p_female_w = female / total_count,
#            PMI_male = log(p_male_w / (p_w * p_c_male)) / -log(p_male_w),
#            PMI_female = log(p_female_w / (p_w * p_c_female)) / -log(p_female_w))
#
#   # Filter for top female words
#   top_female <- pmi_df %>%
#     filter(PMI_female > min_p) %>%
#     arrange(desc(PMI_female)) %>%
#     head(100)
#
#   # Filter for top male words
#   top_male <- pmi_df %>%
#     filter(PMI_male > min_p) %>%
#     arrange(desc(PMI_male)) %>%
#     head(100)
#
#   # Return a list containing both dataframes
#   return(list(top_female = top_female, top_male = top_male))
# }
calculate_pmi_and_filter <- function(corpus_transposed, min_p = 0.01) {
# Calculate total counts
total_male_count <- sum(corpus_transposed$male)
total_female_count <- sum(corpus_transposed$female)
total_count <- total_male_count + total_female_count
# Calculate probabilities for each class
p_c_male <- total_male_count / total_count
p_c_female <- total_female_count / total_count
# Add PMI calculations to the DataFrame
pmi_df <- corpus_transposed %>%
mutate(
p_w = (.data$male + .data$female) / total_count,
p_w_male = .data$male / total_male_count,
p_w_female = .data$female / total_female_count,
PMI_male = log(p_w_male / (p_w * p_c_male)),
PMI_female = log(p_w_female / (p_w * p_c_female)),
NPMI_male = PMI_male / -log(p_w),
NPMI_female = PMI_female / -log(p_w)
)
# Filter for words with significant NPMI scores
top_female <- pmi_df %>%
filter(NPMI_female > min_p) %>%
arrange(desc(NPMI_female)) %>%
head(100)
top_male <- pmi_df %>%
filter(NPMI_male > min_p) %>%
arrange(desc(NPMI_male)) %>%
head(100)
# Return a list containing both dataframes
return(list(top_female = top_female, top_male = top_male))
}
# Step 1:
corpus <- prepare_corpus(deu_old, "extracted_text_old")
# Step 2:
corpus_transposed <- process_corpus(corpus, gender_neutral_replacements, words_to_remove)
# Step 3:
results <- calculate_pmi_and_filter(corpus_transposed, 0.02)
top_female_words <- results$top_female
top_male_words <- results$top_male
View(top_female_words)
View(top_male_words)
prepare_corpus <- function(data_frame, text_column) {
# Ensure the sex column is complete
df_copy <- data_frame
df_copy <- df_copy[complete.cases(df_copy$sex), ]
# Convert the sex column to numeric (male = 0, female = 1)
df_copy$sex <- ifelse(df_copy$sex == "male", 0, 1)
# Summarize the text data by sex
summary_df <- df_copy %>%
group_by(sex) %>%
summarise(text = paste(!!sym(text_column), collapse = " ")) %>%
ungroup()
# Create the corpus
corpus_created <- corpus(summary_df, docid_field = "sex")
return(corpus_created)
}
gender_neutral_replacements <- c(
"Politikerin" = "Politiker",
"Lehrerin" = "Lehrer",
"Sprecherin" = "Sprecher",
"Wissenschaftlerin" = "Wissenschaftler",
"Direktkandidatin" = "direktkandidat",
"Staatssekretärin" = "Staatssekretär",
"Mitarbeiterin" = "Mitarbeiter",
"Leiterin" = "Leiter",
"Geschäftsführerin" ="Geschäftsführer",
"Referentin" ="referent",
"Spitzenkandidatin" ="Spitzenkandidat",
"Staatsministerin" = "Staatsminister",
"Ministerin" ="Minister",
"Rechtsanwältin" ="Rechtsanwalt",
"Statträtin" = "Stadtrat",
"Generalsekretärin" ="Generalsekretär",
"Senatorin" = "Senator",
"Richterin" ="Richter",
"Assistentin" = "assistent",
"Bürgermeisterin" = "Bürgermeister",
"Präsidentin" = "Präsident",
"Vizepräsidentin" = "Vizepräsident",
"Obfrau" = "Obmann",
"Kandidatin"= "Kandidat",
"Anwältin" = "Anwalt",
"Apothekerin"="Apotheker",
"Betreuerin" ="Betreuer",
"Betriebswirtin" = "Btriebswirtin",
"Dezernentin" ="Dezernent",
"Diplom-Volkswirtin" ="Diplom-Volkswirt",
"Direktorin" = "Direktor",
"Dozentin" = "Dozent",
"Erzieherin"="Erzieher",
"Fachärztin" = "Facharzt",
"Familientherapeutin" ="Familientherapeut",
"Fotografin"="Fotograf",
"Gründerin"="Gründer",
"Hauswirtschaftsleiterin"="Hasuwirtschaftsleiter",
"Journalistin" = "Journalist",
"Juristin" = "Jurist",
"Köchin" ="Koch",
"Korrespondentin" ="Korrespondent",
"Krankenpflegerin" = "Krankenpfleger",
"Kunsthistorikerin" = "Kunsthistoriker",
"Landrätin" ="Landrat",
"Lebensgefährtin" = "Lebensgefährt",
"Nachfolgerin" = "Nachfolger",
"Oberbürgermeisterin" = "oberbürgermeister",
"Postbeamtin" = "Postbeamte",
"Schauspielerin" = "Schauspieler",
"Schneiderin" = "Schneider",
"Schriftstellerin" = "Schriftsteller",
"Sekretärin"="Sekretär",
"Sprachlehrerin"="Sprachlehrer",
"Stadträtin" ="Stadtrat",
"Supervisorin"="Supervisor",
"Unternehmerin"="Unternehmer",
"Verkäuferin"="Verkäufer",
"Wirtschaftsingenieurin" ="Wirtschaftsingenieur",
"Ärztin"="Arzt",
"Gräfin" ="graf",
"Partnerin"="partner",
"Bundeskanzlerin"="Bundeskanzler",
"Betriebswirtin"="betriebswirt",
"industriekauffrau"="Industriekaufmann",
"Einzelhandelskauffrau"="Einzelhandelskaufmann",
"bankkauffrau"="Bankkaufmann",
"Autorin" = "autor",
"Stenotypistin" = "stenotypist",
"Pädagogin"="Padagoge",
"Stellvertreterin" ="Stellvertreter",
"Bundesministerin" = "bundesminister",
"Biologin" = "Biologe",
"Schülerin" = "Schüler",
"Verlegerin" = "Verleger",
"Btriebswirtin" = "Betriebswirt",
"Staatsrätin" = "Staatsrat",
"Fabrikarbeiterin" = "Fabrikarbeiter",
"Steuerberaterin" = "Steuerberater",
"Buchhalterin" = "Buchhalter",
"Architektin" = "Architekt",
"Justizsenatorin" = "Justizsenator",
"Hauswirtschaftslehrerin" = "hauswirtschaftslehrer",
"Gymnasiallehrerin" = "Gymnasiallehrer",
"Sozialarbeiterin" ="Sozialarbeiter",
"Studienrätin" = "Studienrat",
"Diplom-Kauffrau" = "Diplom-Kaufmann",
"Soldatin" = "Soldat",
"Landwirtin" = "Landwirt",
"Redakteurin" = "Redakteur",
"Professorin" = "Professor",
"Notarin" ="Notar",
"Prokuristin" = "Prokurist",
"Diplom-Igenieurin" = "Diplom-Ingenieur",
"Gewerkschaftssekretärin" = "Gewerkschaftssekretär",
"Nationalsozialistin" = "Nationalsozialist",
"Chefredakteurin" = "Chefredakteur"
)
#namen extrahieren
first_words <- vapply(strsplit(matched_data$plain_text, "\\s+"), function(x) gsub("[,;:.!?]+$", "", x[1]), character(1))
second_words <- vapply(strsplit(matched_data$plain_text, "\\s+"), function(x) ifelse(length(x) > 1, gsub("[,;:.!?]+$", "", x[2]), ""), character(1))
##############namen problem
words_to_remove <- unique(c(first_words, second_words, stopwords("de")))
process_corpus <- function(corpus, gender_neutral_replacements, words_to_remove) {
# Tokenizing the corpus with specific removals and replacements
tokens <- tokens(corpus, remove_punct = TRUE, remove_numbers = TRUE, remove_symbols = TRUE) %>%
tokens_replace(pattern = names(gender_neutral_replacements), replacement = gender_neutral_replacements, case_insensitive = TRUE) %>%
tokens_remove(pattern = words_to_remove, padding = FALSE) %>%
tokens_wordstem(language = "german")
# Creating the DFM
dfmat <- dfm(tokens)
# Printing the result to check
print(dfmat)
# Converting the DFM to a data frame
corpus_df <- convert(dfmat, to = "data.frame")
# Setting the first column as row names
rownames(corpus_df) <- corpus_df[, 1]
# Removing the first column from the DataFrame
corpus_df <- corpus_df[, -1]
# Keeping only words that appear in both genders by filtering out columns with zeros
zero_count_per_column <- colSums(corpus_df == 0)
corpus_common <- corpus_df[, zero_count_per_column == 0]
# Transposing the matrix to swap rows and columns
corpus_transposed <- t(corpus_common)
# Converting the transposed matrix back to a DataFrame and adjusting columns
corpus_transposed <- as.data.frame(corpus_transposed)
corpus_transposed$word <- rownames(corpus_transposed)
rownames(corpus_transposed) <- NULL
colnames(corpus_transposed) <- c("male", "female", "word")
return(corpus_transposed)
}
# calculate_pmi_and_filter <- function(corpus_transposed, min_p = 0.01) {
#   # Calculate total counts
#   total_male_count <- sum(corpus_transposed$male)
#   total_female_count <- sum(corpus_transposed$female)
#   total_count <- total_male_count + total_female_count
#
#   # Calculate probabilities for each class
#   p_c_male <- total_male_count / total_count
#   p_c_female <- total_female_count / total_count
#
#   # Add PMI calculations to the DataFrame
#   pmi_df <- corpus_transposed %>%
#     mutate(p_w = (male + female) / total_count,
#            p_male_w = male / total_count,
#            p_female_w = female / total_count,
#            PMI_male = log(p_male_w / (p_w * p_c_male)) / -log(p_male_w),
#            PMI_female = log(p_female_w / (p_w * p_c_female)) / -log(p_female_w))
#
#   # Filter for top female words
#   top_female <- pmi_df %>%
#     filter(PMI_female > min_p) %>%
#     arrange(desc(PMI_female)) %>%
#     head(100)
#
#   # Filter for top male words
#   top_male <- pmi_df %>%
#     filter(PMI_male > min_p) %>%
#     arrange(desc(PMI_male)) %>%
#     head(100)
#
#   # Return a list containing both dataframes
#   return(list(top_female = top_female, top_male = top_male))
# }
calculate_pmi_and_filter <- function(corpus_transposed, min_p = 0.01) {
# Calculate total counts
total_male_count <- sum(corpus_transposed$male)
total_female_count <- sum(corpus_transposed$female)
total_count <- total_male_count + total_female_count
# Calculate probabilities for each class
p_c_male <- total_male_count / total_count
p_c_female <- total_female_count / total_count
# Add PMI calculations to the DataFrame
pmi_df <- corpus_transposed %>%
mutate(
p_w = (.data$male + .data$female) / total_count,
p_w_male = .data$male / total_male_count,
p_w_female = .data$female / total_female_count,
PMI_male = log(p_w_male / (p_w * p_c_male)),
PMI_female = log(p_w_female / (p_w * p_c_female)),
NPMI_male = PMI_male / -log(p_w_male / total_count),
NPMI_female = PMI_female / -log(p_w_female / total_count)
)
# Filter for words with significant NPMI scores
top_female <- pmi_df %>%
filter(NPMI_female > min_p) %>%
arrange(desc(NPMI_female)) %>%
head(100)
top_male <- pmi_df %>%
filter(NPMI_male > min_p) %>%
arrange(desc(NPMI_male)) %>%
head(100)
# Return a list containing both dataframes
return(list(top_female = top_female, top_male = top_male))
}
# Step 1:
corpus <- prepare_corpus(deu_old, "extracted_text_old")
# Step 2:
corpus_transposed <- process_corpus(corpus, gender_neutral_replacements, words_to_remove)
# Step 3:
results <- calculate_pmi_and_filter(corpus_transposed, 0.02)
top_female_words <- results$top_female
top_male_words <- results$top_male
View(top_female_matched)
View(top_female_words)
# Step 1:
corpus <- prepare_corpus(deu_old, "extracted_text")
# Step 2:
corpus_transposed <- process_corpus(corpus, gender_neutral_replacements, words_to_remove)
# Step 3:
results <- calculate_pmi_and_filter(corpus_transposed, 0.02)
top_female_words <- results$top_female
top_male_words <- results$top_male
#female data
write_csv(top_female_words, "female_pmi_new.csv")
#male data
write_csv(top_male, "male_pmi_new.csv")
female_pmi_old_cat <- read.csv("Thesis/PMI_lists/female_pmi_new_cat", sep = ";")
female_pmi_old_cat <- read.csv("PMI_lists/female_pmi_new_cat", sep = ";")
female_pmi_old_cat <- read.csv("PMI_lists/female_pmi_new_cat", sep = ";")
setwd("~/Documents/Zukunft/Master/drittes semester/thesis/Code/Thesis/PMI_lists")
female_pmi_old_cat <- read.csv("female_pmi_new_cat.csv", sep = ";")
female_pmi_old_cat <- read.csv("female_pmi_new_cat", sep = ";")
library(readr)
female_pmi_new_cat <- read_delim("female_pmi_new_cat.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(female_pmi_new_cat)
female_pmi_old_cat %>%
count(cat) %>%
mutate(percentage = n / sum(n) * 100) %>%
select(cat, percentage)
female_pmi_old_cat %>%
count(cat) %>%
mutate(percentage = n / sum(n) * 100) %>%
select(cat, percentage)
library(readr)
male_pmi_new_cat <- read_delim("male_pmi_new_cat.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(male_pmi_new_cat)
male_pmi_old_cat %>%
count(cat) %>%
mutate(percentage = n / sum(n) * 100) %>%
select(cat, percentage)
m_count <- prop.table(table(male_pmi_old_cat$cat)) * 100
f_count <- prop.table(table(female_pmi_old_cat$cat)) * 100
# Initialisiere Vektoren für die Proportionen
m_proportions <- numeric(length = 4)
f_proportions <- numeric(length = 4)
categories <- c('F', 'G', 'O', 'R')
for (i in 1:4) {
m_proportions[i] <- ifelse(categories[i] %in% names(m_count), m_count[categories[i]], 0)
f_proportions[i] <- ifelse(categories[i] %in% names(f_count), f_count[categories[i]], 0)
}
p0 <- as.numeric(m_proportions)
p1 <- as.numeric(f_proportions)
# Berechnung von Cohen's w in R
cohens_w <- sqrt(sum(((p1 - p0)^2) / p1))
print(cohens_w)
female_pmi_new_cat %>%
count(cat) %>%
mutate(percentage = n / sum(n) * 100) %>%
select(cat, percentage)
#male data
write_csv(top_male, "male_pmi_new.csv")
male_pmi_old_cat <- read.csv("male_pmi_old_cat", sep = ";")
female_pmi_new_cat %>%
count(cat) %>%
mutate(percentage = n / sum(n) * 100) %>%
select(cat, percentage)
male_pmi_new_cat %>%
count(cat) %>%
mutate(percentage = n / sum(n) * 100) %>%
select(cat, percentage)
m_count <- prop.table(table(male_pmi_new_cat$cat)) * 100
f_count <- prop.table(table(female_pmi_new_cat$cat)) * 100
# Initialisiere Vektoren für die Proportionen
m_proportions <- numeric(length = 4)
f_proportions <- numeric(length = 4)
categories <- c('F', 'G', 'O', 'R')
for (i in 1:4) {
m_proportions[i] <- ifelse(categories[i] %in% names(m_count), m_count[categories[i]], 0)
f_proportions[i] <- ifelse(categories[i] %in% names(f_count), f_count[categories[i]], 0)
}
p0 <- as.numeric(m_proportions)
p1 <- as.numeric(f_proportions)
# Berechnung von Cohen's w in R
cohens_w <- sqrt(sum(((p1 - p0)^2) / p1))
print(cohens_w)
m_count_abs <- table(male_pmi_cat$cat)
f_count_abs <- table(female_pmi_cat$cat)
# Stelle sicher, dass beide Tabellen dieselben Kategorien in derselben Reihenfolge haben
all_categories <- union(names(m_count_abs), names(f_count_abs))
m_count_abs <- m_count_abs[all_categories]
f_count_abs <- f_count_abs[all_categories]
# Ersetze fehlende Kategorien durch 0
m_count_abs[is.na(m_count_abs)] <- 0
f_count_abs[is.na(f_count_abs)] <- 0
# Führe Fisher's Exact Test mit den absoluten Häufigkeiten durch
fisher_test_result <- fisher.test(rbind(m_count_abs, f_count_abs))
print(fisher_test_result)
View(male_pmi_new_cat)
View(male_pmi_old_cat)
View(male_pmi_new_cat)
View(male_pmi_old_cat)
